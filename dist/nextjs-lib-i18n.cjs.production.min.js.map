{"version":3,"file":"nextjs-lib-i18n.cjs.production.min.js","sources":["../src/utils.ts","../src/resource.ts","../src/provider.tsx","../src/link.tsx","../src/middleware.ts"],"sourcesContent":["import URI from 'urijs';\r\nimport type { ValidLocale } from './type';\r\n\r\nexport const getNormalizeTralingSlashPath = (\r\n  path: string,\r\n  removeTralingSlash = true\r\n) => {\r\n  const uri = new URI(path);\r\n  if (uri.path().endsWith('/')) {\r\n    return removeTralingSlash ? uri.directory() : uri.path();\r\n  } else {\r\n    return removeTralingSlash ? uri.path() : uri.path() + '/';\r\n  }\r\n};\r\n\r\nexport const getAllViableLocaleRegex = (locale: string) => {\r\n  const [language, region] = locale.split('-');\r\n  // here we support checking capitalized and trailing slash\r\n  // valid example: /en-us  /en-US /EN-US /EN-us /en-us/\r\n  return new RegExp(\r\n    `^/(${language}|${language.toUpperCase()})-(${region}|${region.toUpperCase()})(\\/?)`\r\n  );\r\n};\r\n\r\nexport const getMatchLocaleByPath = <T extends { [x: string]: ValidLocale }>(\r\n  path: string,\r\n  supportedLocales: T\r\n) => {\r\n  return Object.values(supportedLocales).find((locale) => {\r\n    return getAllViableLocaleRegex(locale).test(path);\r\n  });\r\n};\r\n\r\nexport const getLocaleOmmitedPath = <T extends { [x: string]: ValidLocale }>(\r\n  path: string,\r\n  supportedLocales: T\r\n) => {\r\n  const locale = getMatchLocaleByPath(path, supportedLocales);\r\n  if (locale) {\r\n    return path.replace(getAllViableLocaleRegex(locale), '/');\r\n  } else {\r\n    return path;\r\n  }\r\n};\r\n\r\nexport const getLocaleOmmitedUrl = <T extends { [x: string]: ValidLocale }>(\r\n  url: string,\r\n  supportedLocales: T\r\n) => {\r\n  const uri = new URI(url);\r\n  const newUri = uri.pathname(\r\n    getLocaleOmmitedPath(uri.pathname(), supportedLocales)\r\n  );\r\n  return newUri.readable();\r\n};\r\n","import i18next from 'i18next';\r\nimport {\r\n  getLocaleOmmitedPath,\r\n  getMatchLocaleByPath,\r\n  getNormalizeTralingSlashPath,\r\n} from './utils';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport { useRouter } from 'next/router';\r\nimport { useTranslation } from 'react-i18next';\r\nimport type { StringMap, TOptions } from 'i18next';\r\nimport type { ValidLocale } from './type';\r\n\r\nconst ResourceSymbol = Symbol('i18nextResource');\r\n\r\ntype IResource<\r\n  T extends object,\r\n  SupportedLocale extends { [lang: string]: ValidLocale },\r\n  KeyOfSupportedLocale extends keyof SupportedLocale\r\n> = {\r\n  [lng in SupportedLocale[KeyOfSupportedLocale]]?: T;\r\n} & {\r\n  [ResourceSymbol]?: string;\r\n};\r\n\r\ntype TFunction<T extends object> = <\r\n  K extends keyof T,\r\n  TResult = T[K],\r\n  TInterpolationMap extends object = StringMap\r\n>(\r\n  key: K,\r\n  options?: TOptions<TInterpolationMap> | string\r\n) => TResult;\r\n\r\nexport class I18Next<\r\n  SupportedLocale extends { [lang: string]: ValidLocale },\r\n  KeyOfSupportedLocale extends keyof SupportedLocale,\r\n  LocaleCode extends SupportedLocale[KeyOfSupportedLocale]\r\n> {\r\n  private nsCounter = 0;\r\n\r\n  private constructor(\r\n    public supportedLocales: SupportedLocale,\r\n    public deafultLocale: LocaleCode\r\n  ) {\r\n    i18next.use(initReactI18next).init({\r\n      resources: { [deafultLocale]: {} },\r\n      lng: deafultLocale,\r\n      supportedLngs: Object.values(supportedLocales),\r\n      partialBundledLanguages: true,\r\n      lowerCaseLng: true,\r\n      fallbackLng: Object.values(supportedLocales),\r\n      interpolation: { escapeValue: false },\r\n    });\r\n  }\r\n\r\n  static init<\r\n    SupportedLocale extends { [lang: string]: ValidLocale },\r\n    KeyOfSupportedLocale extends keyof SupportedLocale,\r\n    LocaleCode extends SupportedLocale[KeyOfSupportedLocale]\r\n  >(options: { supportedLocales: SupportedLocale; defaultLocale: LocaleCode }) {\r\n    return new I18Next(options.supportedLocales, options.defaultLocale);\r\n  }\r\n\r\n  useChangeLocale = () => {\r\n    const router = useRouter();\r\n    const handleChange = <K extends keyof SupportedLocale>(\r\n      locale: SupportedLocale[K]\r\n    ) => {\r\n      const localeOmmitedPath = getLocaleOmmitedPath(\r\n        router.asPath,\r\n        this.supportedLocales\r\n      );\r\n      const as = `/${locale}${localeOmmitedPath}`;\r\n      router.push(router.pathname, as);\r\n    };\r\n    return handleChange;\r\n  };\r\n\r\n  useCurrentLanguage = () => {\r\n    return i18next.language;\r\n  };\r\n\r\n  useLocaleCanonicalPath = (\r\n    { reserveDefaultLocalePath } = { reserveDefaultLocalePath: false }\r\n  ) => {\r\n    const router = useRouter();\r\n    const currentLanguage = this.useCurrentLanguage();\r\n    let path: string;\r\n    if (currentLanguage === this.deafultLocale && !reserveDefaultLocalePath) {\r\n      path = getLocaleOmmitedPath(router.asPath, this.supportedLocales);\r\n    } else {\r\n      if (!getMatchLocaleByPath(router.asPath, this.supportedLocales)) {\r\n        path = `/${currentLanguage}${router.asPath}`;\r\n      } else {\r\n        path = router.asPath;\r\n      }\r\n    }\r\n    return getNormalizeTralingSlashPath(path);\r\n  };\r\n\r\n  useResource = <T extends object>(\r\n    resource: IResource<T, SupportedLocale, keyof SupportedLocale>\r\n  ) => {\r\n    if (!resource[ResourceSymbol])\r\n      throw Error('Resource must be created using createResource function');\r\n    const lng = this.useCurrentLanguage();\r\n    const useTranslationFn = useTranslation(resource[ResourceSymbol]).t;\r\n    const t = (field: string, options: object) =>\r\n      useTranslationFn(field, Object.assign({}, { ...options }, { lng }));\r\n    return { t } as { t: TFunction<T> };\r\n  };\r\n\r\n  createResource = <T extends object>(\r\n    resource: IResource<T, SupportedLocale, keyof SupportedLocale>\r\n  ) => {\r\n    resource[ResourceSymbol] = (this.nsCounter++).toString();\r\n    Object.entries(resource).forEach(([lng, keyValue]) => {\r\n      if (!i18next.hasResourceBundle(lng, resource[ResourceSymbol]!)) {\r\n        i18next.addResourceBundle(\r\n          lng,\r\n          resource[ResourceSymbol]!,\r\n          keyValue,\r\n          true,\r\n          true\r\n        );\r\n      }\r\n    });\r\n    return resource;\r\n  };\r\n}\r\n","import i18next from 'i18next';\r\nimport React from 'react';\r\nimport { getMatchLocaleByPath } from './utils';\r\nimport { useRouter } from 'next/router';\r\nimport type { NextPageContext } from 'next';\r\nimport type { ValidLocale } from './type';\r\nimport type { I18Next } from './resource';\r\n\r\nconst isServer = typeof window === 'undefined';\r\n\r\nconst localeContext = {\r\n  locale: '' as ValidLocale,\r\n  i18n: (null as unknown) as I18Next<any, any, any>,\r\n};\r\n\r\nexport const LocaleContext = React.createContext<{\r\n  locale: ValidLocale;\r\n  i18n: I18Next<any, any, any>;\r\n}>(localeContext);\r\n\r\nexport const _LocaleProvider = LocaleContext.Provider;\r\n\r\nexport const getLocaleFromAppContext = (\r\n  ctx: NextPageContext,\r\n  defaultLocale: string\r\n) => {\r\n  const headers = ctx.req ? ctx.req.headers : { locale: defaultLocale };\r\n  const { locale } = headers;\r\n  return locale?.toString() ?? defaultLocale;\r\n};\r\n\r\nexport const LocaleProvider: React.FC<{\r\n  initialLocale: ValidLocale;\r\n  i18n: I18Next<any, any, any>;\r\n}> = ({ initialLocale, children, i18n }) => {\r\n  const router = useRouter();\r\n  const locale = React.useMemo(() => {\r\n    // server's router.asPath has been ommited in locale middleware\r\n    if (isServer) return initialLocale;\r\n    // we detect client side locale from router.asPath\r\n    else\r\n      return (\r\n        getMatchLocaleByPath(router.asPath, i18n.supportedLocales) ??\r\n        initialLocale\r\n      );\r\n  }, [router]);\r\n  i18next.language = locale;\r\n  return <_LocaleProvider value={{ locale, i18n }}>{children}</_LocaleProvider>;\r\n};\r\n","import _Link from 'next/link';\r\nimport React from 'react';\r\nimport { LocaleContext } from './provider';\r\nimport type { LinkProps } from 'next/link';\r\n\r\nexport const Link: React.FC<LinkProps> = ({\r\n  children,\r\n  href,\r\n  as: originAs,\r\n  ...rest\r\n}) => {\r\n  const localeContext = React.useContext(LocaleContext);\r\n  const i18n = localeContext.i18n;\r\n  const currentLanguage = i18n.useCurrentLanguage();\r\n  const as =\r\n    currentLanguage === i18n.deafultLocale\r\n      ? originAs ?? href\r\n      : `/${currentLanguage}${originAs ?? href}`;\r\n  return (\r\n    <_Link href={href} as={as} {...rest}>\r\n      {children}\r\n    </_Link>\r\n  );\r\n};\r\n","import { getLocaleOmmitedUrl, getMatchLocaleByPath } from './utils';\r\nimport type express from 'express';\r\nimport type { ValidLocale } from './type';\r\n\r\nexport const localeParser = ({\r\n  supportedLocales,\r\n  defaultLocale,\r\n}: {\r\n  supportedLocales: { [lang: string]: ValidLocale };\r\n  defaultLocale: ValidLocale;\r\n}) => (\r\n  req: express.Request,\r\n  _: express.Response,\r\n  next: express.NextFunction\r\n) => {\r\n  req.headers = Object.assign({}, req.headers, { locale: defaultLocale }); // assign default language\r\n  try {\r\n    const matchedLocale = getMatchLocaleByPath(req.path, supportedLocales);\r\n    if (matchedLocale) {\r\n      req.headers = Object.assign({}, req.headers, { locale: matchedLocale });\r\n      req.url = getLocaleOmmitedUrl(req.url, supportedLocales);\r\n    }\r\n  } catch (e) {\r\n    console.error(e);\r\n  } finally {\r\n    next();\r\n  }\r\n};\r\n"],"names":["getNormalizeTralingSlashPath","path","removeTralingSlash","uri","URI","endsWith","directory","getAllViableLocaleRegex","locale","split","language","region","RegExp","toUpperCase","getMatchLocaleByPath","supportedLocales","Object","values","find","test","getLocaleOmmitedPath","replace","getLocaleOmmitedUrl","url","pathname","readable","ResourceSymbol","Symbol","I18Next","deafultLocale","router","useRouter","localeOmmitedPath","asPath","_this","push","i18next","reserveDefaultLocalePath","currentLanguage","useCurrentLanguage","resource","Error","lng","useTranslationFn","useTranslation","t","field","options","assign","nsCounter","toString","entries","forEach","keyValue","hasResourceBundle","addResourceBundle","use","initReactI18next","init","resources","supportedLngs","partialBundledLanguages","lowerCaseLng","fallbackLng","interpolation","escapeValue","defaultLocale","isServer","window","LocaleContext","React","createContext","i18n","_LocaleProvider","Provider","children","href","originAs","as","rest","useContext","_Link","initialLocale","useMemo","value","ctx","req","headers","_","next","matchedLocale","e","console","error"],"mappings":"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"}